generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}
// Use Direct URL from env for Production and 
// Database URL from env.local for Development
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["public"]
}

model profile {
  id               String        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name             String?
  username         String?        @unique
  bio              String?
  profile_picture  String?
  role             role?
  created_at       DateTime      @default(now())
  updated_at       DateTime?      @updatedAt
  auth_user_id     String ?       @unique @db.Uuid
  email            String?        @unique
  achievements     achievement[]
  comments         comment[]
  followers        connection[]  @relation("FollowerRelation")
  following        connection[]  @relation("FollowingRelation")
  likes            like[]
  received_messages message[]     @relation("ReceivedMessages")
  sent_messages     message[]     @relation("SentMessages")
  physical_info     physical_info?
  posts            post[]
  sport_info       sport_info?
  training         training?

  @@map("profiles")
  @@schema("public")
}

model physical_info {
  id         String  @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  profile_id String  @unique @db.Uuid
  height     Float?
  weight     Float?
  age        Int?
  profile    profile @relation(fields: [profile_id], references: [id])

  @@map("physical_info")
  @@schema("public")
}

model sport_info {
  id         String  @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  profile_id String  @unique @db.Uuid
  sport      String
  position   String?
  experience Int?
  profile    profile @relation(fields: [profile_id], references: [id])

  @@map("sport_info")
  @@schema("public")
}

model training {
  id         String  @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  profile_id String  @unique @db.Uuid
  schedule   String?
  coach      String?
  profile    profile @relation(fields: [profile_id], references: [id])

  @@map("training")
  @@schema("public")
}

model achievement {
  id         String  @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  profile_id String  @db.Uuid
  title      String
  year       Int?
  profile    profile @relation(fields: [profile_id], references: [id])

  @@map("achievements")
  @@schema("public")
}

model post {
  id         String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  author_id  String    @db.Uuid
  content    String?
  media_url  String?
  created_at DateTime  @default(now())
  comments   comment[]
  likes      like[]
  author     profile   @relation(fields: [author_id], references: [id])

  @@map("posts")
  @@schema("public")
}

model comment {
  id         String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  post_id    String   @db.Uuid
  author_id  String   @db.Uuid
  content    String
  created_at DateTime @default(now())
  author     profile  @relation(fields: [author_id], references: [id])
  post       post     @relation(fields: [post_id], references: [id])

  @@map("comments")
  @@schema("public")
}

model like {
  id      String  @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  post_id String  @db.Uuid
  user_id String  @db.Uuid
  post    post    @relation(fields: [post_id], references: [id])
  user    profile @relation(fields: [user_id], references: [id])

  @@map("likes")
  @@schema("public")
}

model connection {
  id           String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  follower_id  String   @db.Uuid
  following_id String   @db.Uuid
  created_at   DateTime @default(now())
  follower     profile  @relation("FollowerRelation", fields: [follower_id], references: [id])
  following    profile  @relation("FollowingRelation", fields: [following_id], references: [id])

  @@map("connections")
  @@schema("public")
}

model message {
  id          String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  sender_id   String   @db.Uuid
  receiver_id String   @db.Uuid
  content     String
  created_at  DateTime @default(now())
  receiver    profile  @relation("ReceivedMessages", fields: [receiver_id], references: [id])
  sender      profile  @relation("SentMessages", fields: [sender_id], references: [id])

  @@map("messages")
  @@schema("public")
}

enum role {
  ATHLETE
  COACH
  SUPPORTIVE_PROFESSIONAL
  CLUB

  @@map("roles")
  @@schema("public")
}
